generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// To use PostgreSQL instead of SQLite, change the provider:
// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String        @default("user")
  avatar        String?
  bio           String?
  location      String?
  socialLinks   String?
  responseTime  Int?
  isVerified    Boolean       @default(false)
  theme         String?
  background    String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  achievements  Achievement[]
  bookings      Booking[]
  listings      Listing[]
  reviews       Review[]
  sessions      Session[]
  wishlistItems Wishlist[]
}

model Listing {
  id            String     @id @default(cuid())
  title         String
  description   String
  price         Float
  location      String
  category      String
  priceUnit     String
  images        String?
  features      String?
  ownerId       String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  bookings      Booking[]
  owner         User       @relation(fields: [ownerId], references: [id])
  reviews       Review[]
  wishlistItems Wishlist[]
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  userId    String
  listingId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  listing   Listing  @relation(fields: [listingId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, listingId])
}

model Booking {
  id         String   @id @default(cuid())
  startDate  DateTime
  endDate    DateTime
  totalPrice Float
  status     String   @default("pending")
  userId     String
  listingId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  listing    Listing  @relation(fields: [listingId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  listingId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  listing   Listing  @relation(fields: [listingId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, listingId])
}

model Achievement {
  id          String    @id @default(cuid())
  userId      String
  type        String
  title       String
  description String
  icon        String?
  earnedAt    DateTime  @default(now())
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}