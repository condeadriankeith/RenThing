// Prisma Schema for RenThing with MySQL
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User roles
enum Role {
  admin
  vendor
  user
}

// Booking statuses
enum BookingStatus {
  pending
  confirmed
  completed
  cancelled
}

// User model
model User {
  id            String      @id @default(uuid())
  email         String      @unique
  password      String?
  name          String?
  avatar        String?
  role          Role        @default(user)
  createdAt     DateTime    @default(now()) @db.DateTime(6)
  updatedAt     DateTime    @updatedAt @db.DateTime(6)
  
  // Relations
  listings      Listing[]   
  bookings      Booking[]   
  reviews       Review[]    
  messagesSent  Message[]   @relation("sentMessages")
  messagesRec   Message[]   @relation("receivedMessages")
  wishlists     Wishlist[]
  achievements  Achievement[]
  purchases     Purchase[]
  userBadges    UserBadge[]
  vouchers      Voucher[]
  voucherRedemptions VoucherRedemption[]
  transactions  Transaction[]
}

// Listing model
model Listing {
  id            String      @id @default(uuid())
  title         String
  description   String
  price         Float
  location      String
  category      String
  priceUnit     String
  ownerId       String
  images        String?
  createdAt     DateTime    @default(now()) @db.DateTime(6)
  updatedAt     DateTime    @updatedAt @db.DateTime(6)
  
  // Relations
  owner         User        @relation(fields: [ownerId], references: [id])
  bookings      Booking[]
  reviews       Review[]
  wishlistItems Wishlist[]
}

// Booking model
model Booking {
  id            String        @id @default(uuid())
  userId        String
  listingId     String
  startDate     DateTime
  endDate       DateTime
  status        BookingStatus @default(pending)
  createdAt     DateTime      @default(now()) @db.DateTime(6)
  updatedAt     DateTime      @updatedAt @db.DateTime(6)
  
  // Relations
  user          User          @relation(fields: [userId], references: [id])
  listing       Listing       @relation(fields: [listingId], references: [id])
  review        Review?
  transaction   Transaction?
}

// Review model
model Review {
  id            String      @id @default(uuid())
  userId        String
  listingId     String
  rating        Int
  comment       String?
  createdAt     DateTime    @default(now()) @db.DateTime(6)
  updatedAt     DateTime    @updatedAt @db.DateTime(6)
  
  // Relations
  user          User        @relation(fields: [userId], references: [id])
  listing       Listing     @relation(fields: [listingId], references: [id])
  booking       Booking?    @relation(fields: [bookingId], references: [id])
  
  // Additional fields
  bookingId     String?      @unique
}

// Message model
model Message {
  id            String      @id @default(uuid())
  senderId      String
  receiverId    String
  content       String
  read          Boolean     @default(false)
  createdAt     DateTime    @default(now()) @db.DateTime(6)
  
  // Relations
  sender        User        @relation("sentMessages", fields: [senderId], references: [id])
  receiver      User        @relation("receivedMessages", fields: [receiverId], references: [id])
}

// Transaction model
model Transaction {
  id            String      @id @default(uuid())
  bookingId     String      @unique
  amount        Float
  currency      String      @default("PHP")
  paymentMethod String?
  status        String      @default("pending")
  createdAt     DateTime    @default(now()) @db.DateTime(6)
  updatedAt     DateTime    @updatedAt @db.DateTime(6)
  
  // Relations
  booking       Booking     @relation(fields: [bookingId], references: [id])
  // Add relation back to User
  userId        String
  user          User        @relation(fields: [userId], references: [id])
}

// Wishlist model
model Wishlist {
  id            String      @id @default(uuid())
  userId        String
  listingId     String
  createdAt     DateTime    @default(now()) @db.DateTime(6)
  
  // Relations
  user          User        @relation(fields: [userId], references: [id])
  listing       Listing     @relation(fields: [listingId], references: [id])
  
  @@unique([userId, listingId])
}

// Achievement model
model Achievement {
  id            String      @id @default(uuid())
  userId        String
  name          String
  description   String
  icon          String?
  earnedAt      DateTime    @default(now()) @db.DateTime(6)
  expiresAt     DateTime?   @db.DateTime(6)
  createdAt     DateTime    @default(now()) @db.DateTime(6)
  updatedAt     DateTime    @updatedAt @db.DateTime(6)
  
  // Relations
  user          User        @relation(fields: [userId], references: [id])
}

// Purchase model
model Purchase {
  id            String      @id @default(uuid())
  userId        String
  itemType      String
  itemId        String?
  amount        Float
  currency      String      @default("PHP")
  status        String      @default("completed")
  createdAt     DateTime    @default(now()) @db.DateTime(6)
  
  // Relations
  user          User        @relation(fields: [userId], references: [id])
  // Add relation back to UserBadge
  userBadges    UserBadge[]
}

// UserBadge model
model UserBadge {
  id            String      @id @default(uuid())
  userId        String
  badgeType     String
  purchaseId    String?
  expiresAt     DateTime?   @db.DateTime(6)
  createdAt     DateTime    @default(now()) @db.DateTime(6)
  
  // Relations
  user          User        @relation(fields: [userId], references: [id])
  purchase      Purchase?   @relation(fields: [purchaseId], references: [id])
}

// Voucher model
model Voucher {
  id            String      @id @default(uuid())
  userId        String
  voucherType   String
  code          String      @unique
  discount      Float
  used          Boolean     @default(false)
  usedAt        DateTime?   @db.DateTime(6)
  expiresAt     DateTime?   @db.DateTime(6)
  createdAt     DateTime    @default(now()) @db.DateTime(6)
  
  // Relations
  user          User        @relation(fields: [userId], references: [id])
  redemptions   VoucherRedemption[]
}

// VoucherRedemption model
model VoucherRedemption {
  id            String      @id @default(uuid())
  voucherId     String
  userId        String
  redeemedAt    DateTime    @default(now()) @db.DateTime(6)
  
  // Relations
  voucher       Voucher     @relation(fields: [voucherId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
  
  @@unique([voucherId, userId])
}