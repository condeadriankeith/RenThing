// BUSINESS LOGIC: Chat rooms represent PERMANENT transaction history
// - Created when customer first messages owner about a listing
// - Cannot be deleted as they serve as evidence of customer-owner interactions
// - Each room is tied to a specific listing (transaction context)
model ChatRoom {
  id          String    @id @default(uuid())
  listingId   String    // Links to specific listing being discussed
  customerId  String    // The customer interested in renting
  ownerId     String    // The owner of the listing
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  messages    Message[]
  listing     Listing   @relation(fields: [listingId], references: [id])
}

// BUSINESS LOGIC: Messages are permanent transaction records
// - Cannot be deleted as they document customer-owner communication
// - Each message linked to both room and listing for complete traceability
model Message {
  id          String    @id @default(uuid())
  content     String    // The actual message content
  senderId    String    // Who sent the message
  receiverId  String    // Who should receive the message
  roomId      String    // Which chat room this belongs to
  listingId   String    // Direct link to listing for transaction context
  read        Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  room        ChatRoom  @relation(fields: [roomId], references: [id])
  sender      User      @relation("SentMessages", fields: [senderId], references: [id])
  receiver    User      @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  emailVerified DateTime?
  image         String?
  avatar        String?
  password      String
  role          String    @default("USER")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  listings      Listing[]
  bookings      Booking[]
  reviews       Review[]
  wishlist      Wishlist[]
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}

model Listing {
  id          String    @id @default(uuid())
  title       String
  description String
  price       Float
  location    String
  images      String   // JSON array of image URLs
  features    String   // JSON array of features
  ownerId     String
  owner       User      @relation(fields: [ownerId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookings    Booking[]
  reviews     Review[]
  wishlist    Wishlist[]
  chatRooms   ChatRoom[]
}

model Booking {
  id          String    @id @default(uuid())
  listingId   String
  listing     Listing   @relation(fields: [listingId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  startDate   DateTime
  endDate     DateTime
  totalPrice  Float
  status      String    @default("pending")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  transaction Transaction?
}

model Wishlist {
  id        String    @id @default(uuid())
  userId    String
  listingId String
  user      User      @relation(fields: [userId], references: [id])
  listing   Listing   @relation(fields: [listingId], references: [id])
  createdAt DateTime  @default(now())
  
  @@unique([userId, listingId])
}

model Transaction {
  id          String    @id @default(uuid())
  bookingId   String    @unique
  booking     Booking   @relation(fields: [bookingId], references: [id])
  userId      String
  amount      Float
  currency    String
  paymentMethod String
  xenditInvoiceId String?
  stripePaymentIntentId String?
  status      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Review {
  id        String    @id @default(uuid())
  listingId String
  listing   Listing   @relation(fields: [listingId], references: [id])
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
